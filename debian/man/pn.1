.TH "pn" "1" "25 July 2013" "" ""
.SH "NAME"
pn \- Powerful wrapper for periodic tasks (e.g. controlled by cron)
.SH SYNOPSIS
\fBpn\fP [OPTIONS]... COMMAND

Safely wrap execution of COMMAND in e.g. a cron job
.SH DESCRIPTION

.PP
Periodicnoise (short: \fBpn\fP) is a powerful wrapper for periodic tasks, such as the ones by the \fBcron\fP deamon, which:
.PP
.IP o
scatters the start of it within a random interval. Useful if executed on many machines at the same time.
.IP o
reports results to your logging system
.IP o
reports state of execution (busy, failure, ok) to your monitoring system
.IP o
skips execution, if a previous execution is still running, reporting this fact
.IP o
ensures that only one task of this name can run at a time
.IP o
terminates running execution, if it takes too long
.IP o
cleans up stale log files

.SH OPTIONS
.TP
\fB-d, --max-start-delay\fP
optional maximum execution start delay for command, e.g. 45s, 2m, 1h30m
.TP
\fB-t, --timeout\fP
set hard execution timeout for command, e.g. 45s, 2m, 1h30m
.TP
\fB-s, --use-syslog\fP
log via syslog instead of stderr
.TP
\fB-n, --wrap-nagios-plugin\fP
wrap nagios plugin (pass on return codes, pass first 8KiB of stdout as message)
.TP
\fB--no-stream-stderr\fP
do not stream stderr of wrapped command to log
.TP
\fB--no-stream-stdout\fP
do not stream stdout of wrapped command to log
.TP
\fB-E, --monitor-event\fP
monitoring event (defaults to check_foo for /path/check_foo.sh)
.TP
\fB--monitor-ok\fP
add exit code to consider as no failure
.TP
\fB--monitor-warning\fP
add exit code to warn about
.TP
\fB--monitor-critical\fP
add exit code to consider as critical failure
.TP
\fB--monitor-unknown\fP
add exit code to consider as state not known
.TP
\fB-k, --kill-running\fP
kill already running instance of command
.TP
\fB--no-monitoring\fP
wrap command without sending monitoring events
.TP
\fB--grace-time\fP
time left until TIMEOUT, before sending SIGTERM to command, e.g. 45s, 2m, 1h30m
.TP
\fB--retries\fP
how often to retry the execution, if it fails
.TP
\fB--send-as\fP
send monitoring events masquerading as this entity
.TP
\fB--send-to\fP
send monitoring events to this service
.SH LIFE CYCLE OF PERIODICNOISE

.PP
After startup, arguments are checked. If argument errors arise, periodicnoise
terminates with an error on stderr, without any delay, locking or reporting to
monitoring. Please test the arguments before adding the cron job or read cron
mails again.

The deadline for execution is set to CURRENT_TIME + TIMEOUT. The tool now waits 
for a random amount of time up to MAX_START_DELAY.

Then it tries to take a event specific lock. If it doesn't get the lock, it
reports a busy state as UNKNOWN to the monitoring and exits. Otherwise it tries
to execute the passed command and arguments.

GRACETIME is the amount of time before the deadline indicated by TIMEOUT. 
Then periodicnoise sends SIGTERM to the executed command and all its children, 
to let the child program gracefully die, if it didn't finish in time.

After TIMEOUT has passed, the command and all its children receive a SIGKILL,
which should finally get rid of them as soon as possible.

If periodicnoise didn't kill the program itself, it also reports the exit state.

After ensuring the child process is dead, it frees the lock and reports the results 
to monitoring.

Process execution is optionally retried, if it didn't succeed and RETRIES is greater than 0.

The timer for execution time is also started again with each retry. So if a program times out
once, it has the full time available again for execution. So if you want to detect missing executions,
the total timeout for that is defined as TIMEOUT * (RETRIES + 1)
.PP

.SH "FILES"

.PP
\fB/etc/periodicnoise/config\fP is for global settings,
.PP
\fB$HOME/.config/periodicnoise/config\fP for per-user settings.
Per user settings overwrite global settings for this user. These files are in ini style.
.PP

.PP
Currently there is only a monitoring section defined, where you can define commands triggered by various results of the execution.
.PP

.SH "SEE ALSO"

.PP
\fBcron\fP(8)
.PP
.SH "THANKS"

.PP
Thanks to S\(:o\&nke R\(:u\&mpler and Deniz Adrian for evangelizing usage of this tool.
.PP
Special thanks to Daniel Bonkowksi for puppet integration
.PP
.SH "AUTHOR"

.PP
periodicnoise was originally hacked together by Ingo Oeser and later refined
and heavily extended by Mathias Lafeldt
.PP
Sources are available at https://github.com/Jimdo/periodicnoise
and a useful puppet module for it is available at https://github.com/Jimdo/puppet-periodicnoise
